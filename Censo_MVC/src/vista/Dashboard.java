package vista;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import vista.frmMenuOp;

/**
 *
 * @author eliza
 */
public class Dashboard extends javax.swing.JFrame {

    /**
     * Creates new form Graficavivienda1
     */
    public Dashboard () {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Salir = new javax.swing.JButton();
        GraficoLocalidades = new javax.swing.JButton();
        GraficoHO = new javax.swing.JButton();
        GraficoVivienda = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        GraficoLocalidades.setText("GraficoLocalidades");
        GraficoLocalidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraficoLocalidadesActionPerformed(evt);
            }
        });

        GraficoHO.setText("Grafico Habitanteocupacion");
        GraficoHO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraficoHOActionPerformed(evt);
            }
        });

        GraficoVivienda.setText("Grafico tipo vivienda");
        GraficoVivienda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraficoViviendaActionPerformed(evt);
            }
        });

        jButton1.setText("Grafico habitante por localidad");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Grafica habitante por municpio");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(GraficoHO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GraficoVivienda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GraficoLocalidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Salir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(GraficoLocalidades)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(GraficoVivienda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GraficoHO)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Salir)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        // TODO add your handling code here:
        /// MOSTRAR LA VENTAN//
        frmMenuOp fs= new  frmMenuOp();
        fs.setVisible(true);
      this.setVisible(false);
    }//GEN-LAST:event_SalirActionPerformed

    private void GraficoLocalidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraficoLocalidadesActionPerformed
        // TODO add your handling code here:
             // Conexión a la base de datos
        Connection conn = null;
        String url = "jdbc:mysql://localhost/mydb";
        String user = "root";
        String password = "";
        try {
            conn = DriverManager.getConnection(url, user, password);
            System.out.println("Conexión establecida");
        } catch (Exception e) {
            System.err.println("Error de conexión: " + e);
            return;
        }
            // Contar la cantidad de registros en cada localidad
           String query=("SELECT nombre_localidad, COUNT(*) FROM localidades GROUP BY nombre_localidad");
           
            
               try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
         // Crear el conjunto de datos para el gráfico de barras
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            while (rs.next()) {
                String localidad = rs.getString("nombre_localidad");
                int cantidad = rs.getInt(2);
                dataset.addValue(cantidad, "Cantidad", localidad);
            }
            
            // Crear el gráfico de barras
            JFreeChart chart = ChartFactory.createBarChart(
                    "Cantidad de registros por localidad", // Título del gráfico
                    "Localidad", // Etiqueta del eje X
                    "Cantidad", // Etiqueta del eje Y
                    dataset, // Conjunto de datos
                    PlotOrientation.VERTICAL, // Orientación del gráfico
                    false, // Incluir leyenda
                    true, // Incluir tooltips
                    false // Incluir URLs
                    );
            
            // Configurar los colores del gráfico
            CategoryPlot plot = (CategoryPlot) chart.getPlot();
            BarRenderer renderer = (BarRenderer) plot.getRenderer();
            renderer.setSeriesPaint(0, Color.BLUE);
            
            // Configurar el eje Y para mostrar enteros solamente
            NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
            
            // Mostrar el gráfico en una ventana
            ChartFrame frame = new ChartFrame("Gráfico", chart);
            frame.pack();
            frame.setVisible(true);
             frame.pack();
            frame.setVisible(true);
            
        } catch (Exception e) {
            System.err.println("Error de consulta: " + e);
            return;
        }
    
     
        
       
    
    }//GEN-LAST:event_GraficoLocalidadesActionPerformed

    private void GraficoViviendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraficoViviendaActionPerformed
        // TODO add your handling code here:
          // Conexión a la base de datos
        Connection conn = null;
        String url = "jdbc:mysql://localhost/mydb";
        String user = "root";
        String password = "";
        try {
            conn = DriverManager.getConnection(url, user, password);
            System.out.println("Conexión establecida");
        } catch (Exception e) {
            System.err.println("Error de conexión: " + e);
            return;
        }
        
         // Consulta SQL para obtener los datos de la tabla vivienda
        String query = "SELECT Material , COUNT(*) FROM vivienda GROUP BY tipo_vivienda";
        
         try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            
            // Creación del conjunto de datos para la gráfica
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            while (rs.next()) {
                String Material = rs.getString("Material");
                int count = rs.getInt(2);
                dataset.addValue(count, "Cantidad", Material);
            }
            
            // Creación de la gráfica de barras
            JFreeChart chart = ChartFactory.createBarChart("Tipos de materialde vivienda", "Tipo", "Cantidad", dataset, PlotOrientation.VERTICAL, false, true, false);
            
            // Mostrar la gráfica en una ventana
            ChartFrame frame = new ChartFrame("Gráfica de vivienda", chart);
            frame.pack();
            frame.setVisible(true);
            
        } catch (Exception e) {
            System.err.println("Error de consulta: " + e);
            return;
        }
    }//GEN-LAST:event_GraficoViviendaActionPerformed

    private void GraficoHOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraficoHOActionPerformed
        // TODO add your handling code here:
        String url = "jdbc:mysql://localhost/mydb";
        String username = "root";
        String password = "";
        try (Connection conn = DriverManager.getConnection(url, username, password)) {
            // 2. Crear el objeto Statement para enviar la consulta SQL
            Statement stmt = conn.createStatement();

            // 3. Ejecutar la consulta SQL
            String query = "SELECT o.nombre_ocupacion, COUNT(*) AS cantidad " +
                           "FROM habitante h " +
                           "JOIN habitante_ocupacion ho ON h.idhabitante = ho.habitante_idhabitante " +
                           "JOIN ocupacion o ON ho.ocupacion_idocupacion = o.idocupacion " +
                           "GROUP BY o.nombre_ocupacion";
            ResultSet rs = stmt.executeQuery(query);

            // 4. Crear la serie de datos para el gráfico
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            while (rs.next()) {
                String ocupacion = rs.getString("nombre_ocupacion");
                int cantidad = rs.getInt("cantidad");
                dataset.setValue(cantidad, "Habitantes", ocupacion);
            }

            // 5. Crear el gráfico a partir del dataset
            JFreeChart chart = ChartFactory.createBarChart(
                "Habitantes por ocupación",    // Título del gráfico
                "Ocupación",    // Etiqueta del eje X
                "Cantidad",     // Etiqueta del eje Y
                dataset,        // Datos para el gráfico
                PlotOrientation.VERTICAL,   // Orientación del gráfico
                true,           // Incluir leyenda
                true,           // Mostrar tooltips
                false           // No usar URLs
            );

            // 6. Mostrar el gráfico en una ventana
            ChartFrame frame = new ChartFrame("Habitantes por ocupación", chart);
            frame.pack();
            frame.setVisible(true);
        } catch (SQLException ex) {
            System.err.println("Error al conectarse a la base de datos: " + ex.getMessage());
        }
    
    }//GEN-LAST:event_GraficoHOActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         String url = "jdbc:mysql://localhost/mydb";
        String username = "root";
        String password = "";
        try (Connection conn = DriverManager.getConnection(url, username, password)) {
            // 2. Crear el objeto Statement para enviar la consulta SQL
            Statement stmt = conn.createStatement();

            // 3. Ejecutar la consulta SQL
        
      String query = "SELECT localidades_idlocalidades, COUNT(*) AS cantidad FROM vivienda GROUP BY localidades_idlocalidades";
          ResultSet rs = stmt.executeQuery(query);


            // 4. Crear la serie de datos para el gráfico
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();

     while (rs.next()) {
    String localidad = rs.getString("localidades_idlocalidades");
    int cantidad = rs.getInt("cantidad");
    dataset.setValue(cantidad, "Habitantes", localidad);
                       }


            // 5. Crear el gráfico a partir del dataset
        JFreeChart chart = ChartFactory.createBarChart(
        "Cantidad de habitantes por localidad", // Título del gráfico
        "Localidad", // Etiqueta del eje X
        "Cantidad", // Etiqueta del eje Y
        dataset, // Datos para el gráfico
        PlotOrientation.VERTICAL, // Orientación del gráfico
        true, // Incluir leyenda
        true, // Mostrar tooltips
        false // No usar URLs
);


            // 6. Mostrar el gráfico en una ventana
            ChartFrame frame = new ChartFrame("Habitantes por ocupación", chart);
            frame.pack();
            frame.setVisible(true);
        } catch (SQLException ex) {
            System.err.println("Error al conectarse a la base de datos: " + ex.getMessage());
        }
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      
      // TODO add your handling code here:
String url = "jdbc:mysql://localhost/mydb";
String username = "root";
String password = "";
try (Connection conn = DriverManager.getConnection(url, username, password)) {
    // 2. Crear el objeto Statement para enviar la consulta SQL
    String query = "SELECT localidades_municipio_idmunicipio, COUNT(*) AS num_viviendas FROM vivienda GROUP BY localidades_municipio_idmunicipio";
    Statement stmt = conn.createStatement();
    ResultSet rs = stmt.executeQuery(query);

    // Crear un conjunto de datos de barras a partir del resultado de la consulta
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    while (rs.next()) {
        int municipio = rs.getInt("localidades_municipio_idmunicipio");
        int numViviendas = rs.getInt("num_viviendas");
        dataset.addValue(numViviendas, "Viviendas", Integer.toString(municipio));
    }

    // Crear el gráfico de barras
    JFreeChart chart = ChartFactory.createBarChart(
            "Cantidad de viviendas por municipio", // Título del gráfico
            "Municipio", // Etiqueta del eje X
            "Cantidad de viviendas", // Etiqueta del eje Y
            dataset, // Conjunto de datos
            PlotOrientation.VERTICAL, // Orientación del gráfico
            true, // Incluir leyenda
            true, // Mostrar tooltips
            false // No incluir URLs
    );

    // Personalizar los colores del gráfico
    CategoryPlot plot = chart.getCategoryPlot();
    plot.setBackgroundPaint(new Color(230, 230, 230)); // Color de fondo
    plot.setRangeGridlinePaint(Color.BLACK); // Color de las líneas de la cuadrícula
    chart.getLegend().setFrame(BlockBorder.NONE); // Sin borde en la leyenda
    chart.getTitle().setPaint(Color.BLACK); // Color del título
    chart.setBackgroundPaint(Color.WHITE); // Color de fondo del gráfico

    // Mostrar el gráfico en una ventana
    ChartFrame frame = new ChartFrame("Gráfico de barras", chart);
    frame.pack();
    frame.setVisible(true);
} catch (SQLException ex) {
    // Manejar la excepción
    ex.printStackTrace();
}

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard .class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard .class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard .class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard .class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
      

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard ().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GraficoHO;
    private javax.swing.JButton GraficoLocalidades;
    private javax.swing.JButton GraficoVivienda;
    private javax.swing.JButton Salir;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
